
README.md
src/com/areas/AreaManager.java
src/com/battle/BattleManager.java
src/com/characters/Character.java
src/com/characters/Enemy.java
src/com/characters/Player.java
src/com/exceptions/InvalidInputException.java
src/com/items/HealingPotion.java
src/com/items/Item.java
src/com/items/Usable.java
src/com/utils/DatabaseManager.java
src/com/utils/InputHandler.java
src/Main.java
</directory_structure>


<file path="New folder/src/com/areas/AreaManager.java">
package com.areas;

import com.characters.Enemy;
import com.characters.Player;
import java.util.Random;
import java.util.Scanner;

public class AreaManager {

    Scanner sc = new Scanner(System.in);
    Random rand = new Random();


    private Enemy getRandomEnemy(Enemy e1, Enemy e2) {
        int roll = rand.nextInt(10); // 0 to 9

        // 0 to 6 â†’ 70% chance
        if (roll < 7) {
            return e1;
        } else {
            return e2;
        }
    }

    public Enemy area1(Player player) {
        // Area 1 enemies
        Enemy enyArea1_1 = new Enemy("Slime", 10, 5);
        Enemy enyArea1_2 = new Enemy("Giant Rat", 15, 10);

        Enemy selectedEnemy = getRandomEnemy(enyArea1_1, enyArea1_2);
        System.out.println("A wild " + selectedEnemy.getName() + " appears!");

//            battle(player, selectedEnemy);

        return selectedEnemy;
    }

    public Enemy area2(Player player) {
        // Area 2 enemies
        Enemy enyArea2_1 = new Enemy("Zombie", 20, 15);
        Enemy enyArea2_2 = new Enemy("Dire Wolf", 25, 20);

        Enemy selectedEnemy = getRandomEnemy(enyArea2_1, enyArea2_2);
        System.out.println("Area 2 - Enemy encountered: " + selectedEnemy.getName());

//            battle(player, selectedEnemy);

        return selectedEnemy;
    }

    public Enemy area3(Player player) {
        // Area 3 enemies
        Enemy enyArea3_1 = new Enemy("Ogre", 30, 25);
        Enemy enyArea3_2 = new Enemy("Vampire", 35, 30);

        Enemy selectedEnemy = getRandomEnemy(enyArea3_1, enyArea3_2);
        System.out.println("Area 3 - Enemy encountered: " + selectedEnemy.getName());

//            battle(player, selectedEnemy);

        return selectedEnemy;
    }

    public Enemy area4(Player player) {
        // Area 4 enemies
        Enemy enyArea4_1 = new Enemy("Wyvern", 40, 35);
        Enemy enyArea4_2 = new Enemy("Demon Knight", 45, 40);

        Enemy selectedEnemy = getRandomEnemy(enyArea4_1, enyArea4_2);
        System.out.println("Area 4 - Enemy encountered: " + selectedEnemy.getName());

//            battle(player, selectedEnemy);

        return selectedEnemy;
    }

    public Enemy area5(Player player) {
        // Area 5 enemies
        Enemy enyArea5_1 = new Enemy("Lich", 50, 45);
        Enemy enyArea5_2 = new Enemy("Ancient Dragon", 55, 50);

        Enemy selectedEnemy = getRandomEnemy(enyArea5_1, enyArea5_2);
        System.out.println("Area 5 - Enemy encountered: " + selectedEnemy.getName());

//            battle(player, selectedEnemy);
        return selectedEnemy;

    }
}
</file>

<file path="New folder/src/com/battle/BattleManager.java">
package com.battle;

import com.areas.AreaManager;
import com.characters.Enemy;
import com.characters.Player;
import com.items.Item;
import com.items.Usable;

import java.util.Scanner;

public class BattleManager {
    public static void startBattle(Player player) {

        Scanner scanner = new Scanner(System.in);
        AreaManager area = new AreaManager();
        boolean keepPlaying = true;

        while (keepPlaying && player.isAlive()) {
            Enemy enemy = null;

            System.out.println("\n=== Choose an Area to Enter ===");
            System.out.println("1. Area 1");
            System.out.println("2. Area 2");
            System.out.println("3. Area 3");
            System.out.println("4. Area 4");
            System.out.println("5. Area 5");
            System.out.print("Enter your choice (1-5): ");

            int areaChoice;
            if (scanner.hasNextInt()) {
                areaChoice = scanner.nextInt();
            } else {
                System.out.println("Invalid input! Please enter a number between 1 and 5.");
                scanner.next(); // clear invalid input
                continue;
            }

            switch (areaChoice) {
                case 1 -> {
                    System.out.println("You are entering Area 1...");
                    enemy = area.area1(player);
                }
                case 2 -> {
                    System.out.println("You are entering Area 2...");
                    enemy = area.area2(player);
                }
                case 3 -> {
                    System.out.println("You are entering Area 3...");
                    enemy = area.area3(player);
                }
                case 4 -> {
                    System.out.println("You are entering Area 4...");
                    enemy = area.area4(player);
                }
                case 5 -> {
                    System.out.println("You are entering Area 5...");
                    enemy = area.area5(player);
                }
                default -> {
                    System.out.println("Invalid choice! Please enter a number between 1 and 5.");
                    continue;
                }
            }

            System.out.println("A wild " + enemy.getName() + " appears!");
            boolean escaped = false;

            while (player.isAlive() && enemy.isAlive()) {
                System.out.println("\nChoose an action:");
                System.out.println("1. Attack");
                System.out.println("2. Use Potion");
                System.out.println("3. Run");
                System.out.println("4. Show Hp");
                System.out.print("Enter choice: ");

                int choice;
                if (scanner.hasNextInt()) {
                    choice = scanner.nextInt();
                } else {
                    System.out.println("Invalid input! Please enter 1, 2, or 3.");
                    scanner.next(); // clear invalid input
                    continue;
                }

                switch (choice) {
                    case 1:
                        player.attack(enemy);
                        break;
                    case 2:
                        boolean used = false;
                        for (Item item : player.getInventory()) {
                            if (item instanceof Usable) {
                                ((Usable) item).use(player);
                                player.getInventory().remove(item);
                                used = true;
                                break;
                            }
                        }
                        if (!used) {
                            System.out.println("No usable potions found.");
                        }
                        break;
                    case 3:
                        System.out.println("You ran away from the battle!");
                        escaped = true;
                        break;
                    case 4:
                        System.out.println("Players hp: " + player.getHp());
                        System.out.println("Enemy hp: " + enemy.getHp());
                        continue;
                    default:
                        System.out.println("Invalid choice. Try again.");
                }

                if (escaped || !enemy.isAlive()) {
                    break;
                }

                if (enemy.isAlive()) {
                    enemy.attack(player);
                }
            }

            if (!player.isAlive()) {
                System.out.println("You have been defeated...");
                keepPlaying = false;
            } else if (!enemy.isAlive()) {
                System.out.println("You defeated the " + enemy.getName() + "!");
            } else if (escaped) {
                System.out.println("You safely escaped. Choose another area!");
            }
        }

        System.out.println("\nGame Over. Thanks for playing!");
    }
}
</file>

<file path="New folder/src/com/characters/Character.java">
package com.characters;

import com.items.Item;
import java.util.ArrayList;
import java.util.List;

public abstract class Character {
    protected String name;
    protected int hp;
    protected int attackPower;
    protected List<Item> inventory = new ArrayList<>();

    public Character(String name, int hp, int attackPower) {
        this.name = name;
        this.hp = hp;
        this.attackPower = attackPower;
    }

    public abstract void attack(Character target);

    public boolean isAlive() {
        return hp > 0;
    }

    public String getName() {
        return name;
    }

    public int getHp() {
        return hp;
    }

    public void takeDamage(int damage) {
        hp -= damage;
        System.out.println(name + " takes " + damage + " damage! Remaining HP: " + hp);
    }

    public void heal(int amount) {
        hp += amount;
        System.out.println(name + " heals for " + amount + " HP! Total HP: " + hp);
    }

    public void addItem(Item item) {
        inventory.add(item);
        System.out.println(item.getName() + " added to inventory.");
    }

    public List<Item> getInventory() {
        return inventory;
    }
}
</file>

<file path="New folder/src/com/characters/Enemy.java">
package com.characters;

public class Enemy extends Character {

    public Enemy(String name, int hp, int attackPower) {
        super(name, hp, attackPower);
    }

    @Override
    public void attack(Character target) {
        System.out.println(name + " attacks " + target.getName() + " for " + attackPower + " damage!");
        target.takeDamage(attackPower);
    }
}
</file>

<file path="New folder/src/com/characters/Player.java">
package com.characters;

import com.items.HealingPotion;

public class Player extends Character {

    public Player(String name) {
        super(name, 100, 20);
        // Add a healing potion by default
        addItem(new HealingPotion());
    }

    @Override
    public void attack(Character target) {
        System.out.println(name + " attacks " + target.getName() + " for " + attackPower + " damage!");
        target.takeDamage(attackPower);
    }
}
</file>

<file path="New folder/src/com/items/HealingPotion.java">
package com.items;

import com.characters.Character;

public class HealingPotion implements Item, Usable {
    private final String name = "Healing Potion";
    private final int healAmount = 30;

    @Override
    public String getName() {
        return name;
    }

    @Override
    public void use(Character target) {
        target.heal(healAmount);
        System.out.println(target.getName() + " used a Healing Potion!");
    }
}
</file>

<file path="New folder/src/com/items/Item.java">
package com.items;

public interface Item {
    String getName();
}
</file>

<file path="New folder/src/com/items/Usable.java">
package com.items;

import com.characters.Character;

public interface Usable {
    void use(Character target);
}
</file>

<file path="New folder/src/com/Main.java">
package com;

import com.characters.Player;
import com.battle.BattleManager;
import com.utils.InputHandler;

public class Main {
    public static void main(String[] args) {
//        Player player()
        System.out.println("Welcome to Legends of the Terminal Realm!");
        String name = InputHandler.getString("Enter your hero's name: ");

        Player player = new Player(name);
        System.out.println("Welcome, " + player.getName() + "!");

        BattleManager.startBattle(player);
    }
}
</file>

<file path="New folder/src/com/utils/DatabaseManager.java">
package com.utils;

import com.characters.Player;
import com.items.HealingPotion;
import java.sql.*;

public class DatabaseManager {


    private static final String DB_HOST = "localhost";
    private static final String DB_PORT = "3306";
    private static final String DB_NAME = "rpg";
    private static final String DB_USER = "root";
    private static final String DB_PASS = "root";


    private static final String DB_URL = "jdbc:mysql://" + DB_HOST + ":" + DB_PORT + "/" + DB_NAME + "?useSSL=false&serverTimezone=UTC";


    private static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
    }

    public static void initializeDatabase() {

        String sql = "CREATE TABLE IF NOT EXISTS player_data (" +
                "id INT AUTO_INCREMENT PRIMARY KEY, " +
                "player_name VARCHAR(50) NOT NULL UNIQUE, " +
                "hp INT NOT NULL, " +
                "attack_power INT NOT NULL, " +
                "potion_count INT NOT NULL, " +
                "highest_area_unlocked INT NOT NULL, " +
                "last_saved_timestamp DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP" +
                ");";

        try (Connection conn = getConnection();
             Statement stmt = conn.createStatement()) {
            stmt.execute(sql);
        } catch (SQLException e) {
            System.out.println("Database initialization error: " + e.getMessage());
        }
    }

    public static void savePlayer(Player player, int highestArea) {
        String sql = "INSERT INTO player_data (player_name, hp, attack_power, potion_count, highest_area_unlocked) " +
                "VALUES(?, ?, ?, ?, ?) " +
                "ON DUPLICATE KEY UPDATE " +
                "hp = VALUES(hp), " +
                "attack_power = VALUES(attack_power), " +
                "potion_count = VALUES(potion_count), " +
                "highest_area_unlocked = VALUES(highest_area_unlocked);";

        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, player.getName());
            pstmt.setInt(2, player.getHp());
            pstmt.setInt(3, player.getAttackPower());
            long potionCount = player.getInventory().stream().filter(item -> item instanceof HealingPotion).count();
            pstmt.setInt(4, (int) potionCount);
            pstmt.setInt(5, highestArea);
            pstmt.executeUpdate();
            System.out.println("Game saved for " + player.getName() + "!");

        } catch (SQLException e) {
            System.out.println("Error saving game: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public static Player loadPlayer(String playerName) {
        String sql = "SELECT hp, attack_power, potion_count, highest_area_unlocked FROM player_data WHERE player_name = ?";

        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, playerName);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                Player loadedPlayer = new Player(playerName);
                loadedPlayer.setHp(rs.getInt("hp"));
                loadedPlayer.setAttackPower(rs.getInt("attack_power"));

                loadedPlayer.getInventory().clear();
                int potionCount = rs.getInt("potion_count");
                for (int i = 0; i < potionCount; i++) {
                    loadedPlayer.addItem(new HealingPotion());
                }

                System.out.println("Welcome back, " + playerName + "!");
                System.out.println("You have " + potionCount + " potions.");
                // This gives you the info about what they've done
                System.out.println("You have unlocked up to Area " + rs.getInt("highest_area_unlocked") + ".");

                return loadedPlayer;
            }

        } catch (SQLException e) {
            System.out.println("Error loading game: " + e.getMessage());
            e.printStackTrace();
        }

        return null;
    }

    public static boolean saveExists(String playerName) {
        String sql = "SELECT 1 FROM player_data WHERE player_name = ?";
        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, playerName);
            ResultSet rs = pstmt.executeQuery();
            return rs.next();
        } catch (SQLException e) {
            return false;
        }
    }
}
</file>

<file path="New folder/src/com/utils/InputHandler.java">
package com.utils;

import java.util.Scanner;

public class InputHandler {
    private static Scanner scanner = new Scanner(System.in);

    public static String getString(String prompt) {
        System.out.print(prompt);
        return scanner.nextLine();
    }

    public static int getInt(String prompt) {
        while (true) {
            try {
                System.out.print(prompt);
                return Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please enter a number.");
            }
        }
    }
}
</file>

<file path="New folder/src/Main.java">
import com.characters.Player;
import com.battle.BattleManager;
import com.utils.DatabaseManager;
import com.utils.InputHandler;

public class Main {
    public static void main(String[] args) {
        DatabaseManager.initializeDatabase();

        System.out.println("Welcome to Legends of the Terminal Realm!");
        String name = InputHandler.getString("Enter your hero's name: ");

        Player player;

        // Check if a save file exists for this player
        if (DatabaseManager.saveExists(name)) {
            System.out.println("Save data found for " + name + ".");
            int choice = InputHandler.getInt("1. New Game\n2. Load Game\nChoose an option: ");
            if (choice == 2) {
                player = DatabaseManager.loadPlayer(name);
                if (player == null) { // Fallback in case loading fails
                    System.out.println("Could not load game. Starting a new one.");
                    player = new Player(name);
                }
            } else {
                player = new Player(name);
                System.out.println("Starting a new adventure!");
            }
        } else {
            // No save exists, start a new game automatically
            player = new Player(name);
            System.out.println("Welcome, " + player.getName() + "!");
        }

        BattleManager.startBattle(player);
    }
}
</file>

<file path="README.md">
# RPG-Project
</file>

<file path="src/com/areas/AreaManager.java">
package com.areas;

import com.characters.Enemy;
import com.characters.Player;

import java.util.Random;
import java.util.Scanner;

public class AreaManager {

    Scanner sc = new Scanner(System.in);
    Random rand = new Random();


    private Enemy getRandomEnemy(Enemy e1, Enemy e2) {
        int roll = rand.nextInt(10); // 0 to 9

        // 0 to 6 â†’ 70% chance
        if (roll < 7) {
            return e1;
        } else {
            return e2;
        }
    }

    public Enemy area1(Player player) {
        // Area 1 enemies
        Enemy enyArea1_1 = new Enemy("Slime", 10, 5);
        Enemy enyArea1_2 = new Enemy("Giant Rat", 15, 10);

        Enemy selectedEnemy = getRandomEnemy(enyArea1_1, enyArea1_2);
        System.out.println("A wild " + selectedEnemy.getName() + " appears!");

//            battle(player, selectedEnemy);

        return selectedEnemy;
    }

    public Enemy area2(Player player) {
        // Area 2 enemies
        Enemy enyArea2_1 = new Enemy("Zombie", 20, 15);
        Enemy enyArea2_2 = new Enemy("Dire Wolf", 25, 20);

        Enemy selectedEnemy = getRandomEnemy(enyArea2_1, enyArea2_2);
        System.out.println("A wild " + selectedEnemy.getName() + " appears!");

//            battle(player, selectedEnemy);

        return selectedEnemy;
    }

    public Enemy area3(Player player) {
        // Area 3 enemies
        Enemy enyArea3_1 = new Enemy("Ogre", 30, 25);
        Enemy enyArea3_2 = new Enemy("Vampire", 35, 30);

        Enemy selectedEnemy = getRandomEnemy(enyArea3_1, enyArea3_2);
        System.out.println("A wild " + selectedEnemy.getName() + " appears!");

//            battle(player, selectedEnemy);

        return selectedEnemy;
    }

    public Enemy area4(Player player) {
        // Area 4 enemies
        Enemy enyArea4_1 = new Enemy("Wyvern", 40, 35);
        Enemy enyArea4_2 = new Enemy("Demon Knight", 45, 40);

        Enemy selectedEnemy = getRandomEnemy(enyArea4_1, enyArea4_2);
        System.out.println("A wild " + selectedEnemy.getName() + " appears!");

//            battle(player, selectedEnemy);

        return selectedEnemy;
    }

    public Enemy area5(Player player) {
        // Area 5 enemies
        Enemy enyArea5_1 = new Enemy("Lich", 50, 45);
        Enemy enyArea5_2 = new Enemy("Ancient Dragon", 55, 50);

        Enemy selectedEnemy = getRandomEnemy(enyArea5_1, enyArea5_2);
        System.out.println("A wild " + selectedEnemy.getName() + " appears!");

//            battle(player, selectedEnemy);
        return selectedEnemy;

    }
}
</file>

<file path="src/com/battle/BattleManager.java">
package com.battle;

import com.areas.AreaManager;
import com.characters.Enemy;
import com.characters.Player;
import com.exceptions.InvalidInputException;
import com.items.HealingPotion;
import com.items.Item;
import com.items.Usable;
import com.utils.DatabaseManager;
import com.utils.InputHandler;

import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class BattleManager {
    public static void startBattle(Player player) {

        Scanner scanner = new Scanner(System.in);
        AreaManager area = new AreaManager(); // use correct class name
        DatabaseManager dbManager = new DatabaseManager();
        boolean keepPlaying = true;
        int highestAreaCompleted = 0;


        while (keepPlaying && player.isAlive()) {

            Enemy enemy = null;

            System.out.println("=== Choose an Area to Enter ===");
            System.out.println("1. Area 1");
            System.out.println("2. Area 2");
            System.out.println("3. Area 3");
            System.out.println("4. Area 4");
            System.out.println("5. Area 5");
            System.out.println("6. Save and Quit");
            System.out.print("Enter your choice (1-6): ");

            int areaChoice;// = scanner.nextInt();

            try {
                System.out.print("Enter your choice (1-6): ");
                if (!scanner.hasNextInt()) throw new InvalidInputException("Please enter a valid number (1-6).");
                areaChoice = scanner.nextInt();
                if (areaChoice < 1 || areaChoice > 6)
                    throw new InvalidInputException("Invalid input! Choose between 1 and 6.");
            } catch (InvalidInputException e) {
                System.out.println(e.getMessage());
                scanner.nextLine(); // Clear invalid input
                continue;
            }

            if (areaChoice == 6) {
                DatabaseManager.savePlayer(player, highestAreaCompleted + 1);
                keepPlaying = false;
                continue;
            }
//
//
//
//            if (areaChoice == 6) {
//                DatabaseManager.savePlayer(player, highestAreaCompleted + 1);
//                keepPlaying = false;
//                continue;
//            }

            switch (areaChoice) {
                case 1 -> {
                    System.out.println("You are entering Area 1...");
                    enemy = area.area1(player);
                }
                case 2 -> {
                    System.out.println("You are entering Area 2...");
                    enemy = area.area2(player);
                }
                case 3 -> {
                    System.out.println("You are entering Area 3...");
                    enemy = area.area3(player);
                }
                case 4 -> {
                    System.out.println("You are entering Area 4...");
                    enemy = area.area4(player);
                }
                case 5 -> {
                    System.out.println("You are entering Area 5...");
                    enemy = area.area5(player);
                }
                default -> System.out.println("Invalid choice! Please enter a number between 1 and 5.");
            }

//        Enemy enemy = new Enemy("Syntax Troll", 50, 10);
            int initialHp = enemy.getHp();

//            System.out.println("A wild " + enemy.getName() + " appears!");

            while (player.isAlive() && enemy.isAlive()) {

                System.out.println("\nChoose an action:");
                System.out.println("1. Attack");
                System.out.println("2. Use Potion");
                System.out.println("3. Run");
                System.out.println("4. Show Hp");

//                System.out.println("Enter choice: ");
                int choice;// = scanner.nextInt();


                try {
                    System.out.print("Enter choice: ");
                    if (!scanner.hasNextInt())
                        throw new InvalidInputException("Only numbers between 1 - 4 are allowed!");
                    choice = scanner.nextInt();
                } catch (InvalidInputException e) {
                    System.out.println(e.getMessage());
                    scanner.nextLine(); // Clear invalid input
                    continue;
                }



                switch (choice) {
                    case 1 -> player.attack(enemy);
                    case 2 -> {
                        boolean used = false;
                        for (Item item : player.getInventory()) {
                            if (item instanceof Usable) {
                                ((Usable) item).use(player);
                                player.getInventory().remove(item);
                                used = true;
                                break;
                            }
                        }
                        if (!used) {
                            System.out.println("No usable potions found.");
                        }
                    }
                    case 3 -> {
                        System.out.println("You fled the battle!");
                        return;
                    }
                    case 4 -> {
                        showDetails(player, enemy);
                        continue;
                    }
                    default -> {
                        System.out.println("Invalid choice. Try again.");
                        continue;
                    }
                }

                if (enemy.isAlive()) {
                    enemy.attack(player);
                }
            }

            if (player.isAlive() && !enemy.isAlive()) {
                System.out.println("You defeated the " + enemy.getName() + "!");
                enemy.giveExp(player, initialHp); // create an initial hp for enemy.
                // Update progress if this is a new highest area
                if (areaChoice > highestAreaCompleted) {
                    highestAreaCompleted = areaChoice;
                }

            }

            if (!player.isAlive()) {
                System.out.println("You have been defeated...");
            } else if (!enemy.isAlive()) {
                System.out.println("You defeated the " + enemy.getName() + "!");
            }
        }
    }

    private static void showDetails(Player player, Enemy enemy) {
        System.out.println("\n=== Player Details ===");
        Map<String, Object> playerDetails = new HashMap<>();
        playerDetails.put("Name", player.getName());
        playerDetails.put("Level", player.getLevel());
        playerDetails.put("HP", player.getHp());
        playerDetails.put("Attack Power", player.getAttackPower());
        playerDetails.put("Potions", player.getInventory().stream().filter(i -> i instanceof HealingPotion).count());

        playerDetails.forEach((k, v) -> System.out.println(k + ": " + v));
        System.out.println("Current EXP: " + player.getCurrentExp() + " / " + player.getExpRequiredForNextLevel());

        System.out.println("\n=== Enemy Details ===");
        Map<String, Object> enemyDetails = new HashMap<>();
        enemyDetails.put("Name", enemy.getName());
        enemyDetails.put("HP", enemy.getHp());
        enemyDetails.put("Attack Power", enemy.getAttackPower());

        enemyDetails.forEach(
                (k, v) -> System.out.println(k + ": " + v)
        );


    }


}
</file>

<file path="src/com/characters/Character.java">
package com.characters;

import com.items.Item;
import java.util.ArrayList;
import java.util.List;

public abstract class Character {
    protected String name;
    protected int hp;
    protected int attackPower;
    protected List<Item> inventory = new ArrayList<>();

    public Character(String name, int hp, int attackPower) {
        this.name = name;
        this.hp = hp;
        this.attackPower = attackPower;
    }

    public abstract void attack(Character target);

    public boolean isAlive() {
        return hp > 0;
    }

    public String getName() {
        return name;
    }

    public int getHp() {
        return hp;
    }

    public void setHp(int hp) {
        this.hp = hp;
    }

    public int getAttackPower() {
        return this.attackPower;
    }
    public void setAttackPower(int attackPower) {
        this.attackPower = attackPower;
    }

    public void takeDamage(int damage) {
        hp -= damage;
        System.out.println(name + " takes " + damage + " damage! Remaining HP: " + hp);
    }

    public void heal(int amount) {
        hp += amount;
        System.out.println(name + " heals for " + amount + " HP! Total HP: " + hp);
    }

    public void addItem(Item item) {
        inventory.add(item);
        System.out.println(item.getName() + " added to inventory.");
    }

    public List<Item> getInventory() {
        return inventory;
    }
}
</file>

<file path="src/com/characters/Enemy.java">
package com.characters;

public class Enemy extends Character {

    public Enemy(String name, int hp, int attackPower) {
        super(name, hp, attackPower);
    }

    protected int expGiven = hp*2;
    @Override
    public void attack(Character target) {
        System.out.println(name + " attacks " + target.getName() + " for " + attackPower + " damage!");
        target.takeDamage(attackPower);
    }

    public void giveExp(Player player, int hp) {
        int exp = hp * 2;
        player.gainExp(exp);
    }
}
</file>

<file path="src/com/characters/Player.java">
package com.characters;

import com.items.HealingPotion;

public class Player extends Character {

    private int level = 1;
    private int currentExp = 0;
    private final int baseExpRequirement = 100; // Base EXP needed to level up

    public Player(String name) {
        super(name, 100, 20);
        // Add a healing potion by default
        addItem(new HealingPotion());
    }

    @Override
    public void attack(Character target) {
        System.out.println(name + " attacks " + target.getName() + " for " + attackPower + " damage!");
        target.takeDamage(attackPower);
    }

    public void gainExp(int amount) {
        currentExp += amount;
        System.out.println("You gained " + amount + " EXP!");

        while (currentExp >= getExpRequiredForNextLevel()) {
            currentExp -= getExpRequiredForNextLevel();
            levelUp();
        }
    }

    private void levelUp() {
        level++;
        System.out.println("You leveled up! You are now level " + level + "!");

        // Increase stats based on level
        setHp(getHp() + 25); // Increase max HP by 25 per level
        setAttackPower(getAttackPower() + 5); // Increase attack power by 5 per level
    }

    public int getLevel() {
        return level;
    }

    public void setLevel(int level) {
        this.level = level;
    }

    public int getCurrentExp() {
        return currentExp;
    }

    public void setCurrentExp(int currentExp) {
        this.currentExp = currentExp;
    }

    public int getExpRequiredForNextLevel() {
        return baseExpRequirement + (level - 1) * 50; // Increases every level
    }
}
</file>

<file path="src/com/exceptions/InvalidInputException.java">
package com.exceptions;

public class InvalidInputException extends Exception {
    public InvalidInputException(String message) {
        super(message);
    }
}
</file>

<file path="src/com/items/HealingPotion.java">
package com.items;

import com.characters.Character;

public class HealingPotion implements Item, Usable {
    private final String name = "Healing Potion";
    private final int healAmount = 30;

    @Override
    public String getName() {
        return name;
    }

    @Override
    public void use(Character target) {
        target.heal(healAmount);
        System.out.println(target.getName() + " used a Healing Potion!");
    }
}
</file>

<file path="src/com/items/Item.java">
package com.items;

public interface Item {
    String getName();
}
</file>

<file path="src/com/items/Usable.java">
package com.items;

import com.characters.Character;

public interface Usable {
    void use(Character target);
}
</file>

<file path="src/com/utils/DatabaseManager.java">
package com.utils;

import com.characters.Player;
import com.items.HealingPotion;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class DatabaseManager {


    private static final String DB_HOST = "localhost";
    private static final String DB_PORT = "3306";
    private static final String DB_NAME = "rpgGame";
    private static final String DB_USER = "root";
    private static final String DB_PASS = "root";


    private static final String DB_URL = "jdbc:mysql://" + DB_HOST + ":" + DB_PORT + "/" + DB_NAME + "?useSSL=false&serverTimezone=UTC";


    private static Connection getConnection() throws SQLException {
        return DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
    }

    public static void initializeDatabase() {

        String sql = "CREATE TABLE IF NOT EXISTS player_data (" +
                "id INT AUTO_INCREMENT PRIMARY KEY, " +
                "player_name VARCHAR(50) NOT NULL UNIQUE, " +
                "level INT NOT NULL DEFAULT 1, " +
                "current_exp INT NOT NULL DEFAULT 0, " +
                "hp INT GENERATED ALWAYS AS (100 + (level - 1) * 5) STORED, " +  // auto-scale HP
                "attack_power INT GENERATED ALWAYS AS (10 + (level - 1) * 5) STORED, " +  // auto-scale attack
                "potion_count INT NOT NULL, " +
                "highest_area_unlocked INT NOT NULL, " +
                "last_saved_timestamp DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP" +
                ");";


        try (Connection conn = getConnection();
             Statement stmt = conn.createStatement()) {
//            String sql = "CREATE TABLE IF NOT EXISTS player_data (" +
//                    "id INT AUTO_INCREMENT PRIMARY KEY, " +
//                    "player_name VARCHAR(50) NOT NULL UNIQUE, " +
//                    "level INT NOT NULL DEFAULT 1, " +
//                    "current_exp INT NOT NULL DEFAULT 0, " +
//                    "hp INT GENERATED ALWAYS AS (100 + (level - 1) * 25) STORED, " +
//                    "attack_power INT GENERATED ALWAYS AS (10 + (level - 1) * 5) STORED, " +
//                    "potion_count INT NOT NULL, " +
//                    "highest_area_unlocked INT NOT NULL, " +
//                    "last_saved_timestamp DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP" +
//                    ");";
            stmt.execute(sql);
        } catch (SQLException e) {
            System.out.println("Database initialization error: " + e.getMessage());
        }
    }

    public static void savePlayer(Player player, int highestArea) {
        if (saveExists(player.getName())) {
            System.out.println("Error: A player with the name '" + player.getName() + "' already exists.");
            return;
        }

        String sql = "INSERT INTO player_data (player_name, level, current_exp, potion_count, highest_area_unlocked) " +
                "VALUES (?, ?, ?, ?, ?)";
        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, player.getName());
            pstmt.setInt(2, player.getLevel());
            pstmt.setInt(3, player.getCurrentExp());
            long potionCount = player.getInventory().stream()
                    .filter(item -> item instanceof HealingPotion)
                    .count();
            pstmt.setInt(4, (int) potionCount);
            pstmt.setInt(5, highestArea);
            pstmt.executeUpdate();
            System.out.println("Game saved for " + player.getName() + "!");
        } catch (SQLException e) {
            System.out.println("Error saving game: " + e.getMessage());
        }
    }

    public static Player loadPlayer(String playerName) {
        String sql = "SELECT level, current_exp, potion_count, highest_area_unlocked FROM player_data WHERE player_name = ?";

        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            pstmt.setString(1, playerName);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                Player loadedPlayer = new Player(playerName);

                int level = rs.getInt("level");
                loadedPlayer.setLevel(level);
                loadedPlayer.setCurrentExp(rs.getInt("current_exp"));

                // hp and attack_power calculated from level
                loadedPlayer.setHp(100 + (level - 1) * 25);
                loadedPlayer.setAttackPower(10 + (level - 1) * 5);

                loadedPlayer.getInventory().clear();
                int potionCount = rs.getInt("potion_count");
                for (int i = 0; i < potionCount; i++) {
                    loadedPlayer.addItem(new HealingPotion());
                }

                System.out.println("Welcome back, " + playerName + "!");
                System.out.println("You have " + potionCount + " potions.");
                System.out.println("You have unlocked up to Area " + rs.getInt("highest_area_unlocked") + ".");

                return loadedPlayer;
            }

        } catch (SQLException e) {
            System.out.println("Error loading game: " + e.getMessage());
            e.printStackTrace();
        }

        return null;
    }

    public static boolean saveExists(String playerName) {
        String sql = "SELECT 1 FROM player_data WHERE player_name = ?";
        try (Connection conn = getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, playerName);
            ResultSet rs = pstmt.executeQuery();
            return rs.next();
        } catch (SQLException e) {
            return false;
        }
    }

    public static List<Player> loadAllPlayers() {
        List<Player> players = new ArrayList<>();
        String sql = "SELECT player_name, level, current_exp FROM player_data";
        try (Connection conn = getConnection();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            while (rs.next()) {
                String name = rs.getString("player_name");
                int level = rs.getInt("level");
                int exp = rs.getInt("current_exp");

                Player player = new Player(name);
                player.setLevel(level);
                player.setCurrentExp(exp);
                player.setHp(100 + (level - 1) * 25);
                player.setAttackPower(10 + (level - 1) * 5);

                players.add(player);
            }
        } catch (SQLException e) {
            System.out.println("Error loading saved players: " + e.getMessage());
        }
        return players;
    }

}
</file>

<file path="src/com/utils/InputHandler.java">
package com.utils;

import java.util.Scanner;

public class InputHandler {
    private static Scanner scanner = new Scanner(System.in);

    public static String getString(String prompt) {
        System.out.print(prompt);
        return scanner.nextLine();
    }

    public static int getInt(String prompt) {
        while (true) {
            try {
                System.out.print(prompt);
                return Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("Invalid input. Please enter a number.");
            }
        }
    }
}
</file>

<file path="src/Main.java">
import com.characters.Player;
import com.battle.BattleManager;
import com.utils.DatabaseManager;
import com.utils.InputHandler;

import java.util.List;

public class Main {
    public static void main(String[] args) {
        DatabaseManager.initializeDatabase();
        System.out.println("Welcome to Legends of the Terminal Realm!");

        Player player = null;
        while (player == null) {
            System.out.println("1. New Game");
            System.out.println("2. Load Game");
            int choice = InputHandler.getInt("Choose an option: ");

            if (choice == 1) {
                String name = InputHandler.getString("Enter your hero's name: ");
                if (DatabaseManager.saveExists(name)) {
                    System.out.println("Error: A player with that name already exists.");
                } else {
                    player = new Player(name);
                    System.out.println("Starting a new adventure!");
                }
            } else if (choice == 2) {
                List<Player> savedPlayers = DatabaseManager.loadAllPlayers();
                if (savedPlayers.isEmpty()) {
                    System.out.println("No saved games found.");
                } else {
                    for (Player p : savedPlayers) {
                        System.out.printf("Name: %s | Level: %d | EXP: %d/%d%n",
                                p.getName(),
                                p.getLevel(),
                                p.getCurrentExp(),
                                p.getExpRequiredForNextLevel());
                    }
                    String name = InputHandler.getString("Enter your character's name to load: ");
                    player = DatabaseManager.loadPlayer(name);
                    if (player == null) {
                        System.out.println("Invalid name entered.");
                    }
                }
            } else {
                System.out.println("Invalid choice. Try again.");
            }
        }

        BattleManager.startBattle(player);
    }
}
</file>

</files>
